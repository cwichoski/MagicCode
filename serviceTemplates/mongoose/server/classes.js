//-------------------------------------------------------------------------------------------
//
// Object classes generated by Magic Code generator
//
//WARNING: do not modify the classes because they may be overwritten by the code generator
//          instead, create a new classes inherited from the generated classes.
//
//-------------------------------------------------------------------------------------------
let mongoose = require('mongoose');                 // Use Mongoose ODM to connect to MongoDB
const OK = 0;
const ABORT = -1;

{{#each collections}}
//----------------------------------------------------------------------------
// Schema
//----------------------------------------------------------------------------
let {{name}}Model = require("./model.js").{{name}}Model;
let Schema = mongoose.Schema;
let {{name}}Schema = new Schema({{name}}Model);
let {{name}}Collection = mongoose.model('{{name}}', {{name}}Schema);
let {{name}}_addons = null;

// we try to instanciate a pre and post process class if there is any
try {
    let {{name}}_addons = require("./addons.js").{{name}}_addons;
} catch(e) {
    // do nothing, we just want to get the pointer to the addon only if it exist.
}



//----------------------------------------------------------------------------
// class {{name}}
//----------------------------------------------------------------------------

class {{tsClassPropertyName name}} {

    constructor() {
        // Connect to MongoDB
        mongoose.connect('{{../service.connector}}', function(error) {
            if (error) {
                console.log("Error connecting to mongoDB at {{../service.connector}}");
                process.exit(1);
            } else {
                console.log("successfully connected to mongoDB at mongodb://localhost:27017/bank");
            }
        }); // connect to our database with mongoose
    };

    template(request, result) {
        let _template = {
          {{#each model}}
            {{@key}}:"{{tsPropertyType this}}"{{#if @last}} {{else}}, {{/if}}
          {{/each}}
        }
        result.send(JSON.stringify(_template));
    }

    query(request, result){
        result.send(JSON.stringify({{name}}Model));
        console.log("payment.query");
    }

{{#if methods.get}}
    get(request, result) {
        let reply = result;
        if (request.body) {
            {{name}}Collection.find(request.body, function (err, result) {
                if (err) {
                    console.log ("ERROR -> Payment.post: "+ err.message);
                    reply.status(500).send(err.message);
                } else {
                    console.log("payment.post: " + result);
                    reply.send(result);
                }
            });  
        }     
    }
{{/if}}

{{#if methods.post}}
    post(request, result) {
        try {
            let reply = result;
            let content = request.body;
            if ({{name}}_addons) {
                if ({{name}}_addons.getPreProcess)
                    content = {{name}}_addons.getPreProcess(content);
            }
            if (content != ABORT && typeof(content)== "object") {
                let record = new  {{name}}Collection(content).save(function (err, result) {     // create a new instance of the Bear model
                    if (err) {
                        throw (err.message);
                    } else {
                        if ({{name}}_addons) {
                            if ({{name}}_addons.getPostProcess)
                                content = {{name}}_addons.getPostProcess(content);
                        }
                        console.log("{{name}}.post: " + result);
                        reply.sendStatus(200);
                    }
                });  
            }    
        } catch (e) {
            console.log("ERROR -> {{name}}.post: " + e)
            reply.status(500).send(e);
        } 
    }
{{/if}}

{{#if methods.put}}
    put(req, res){
        this.post(req, res);
    }
{{/if}}

{{#if methods.delete}}
    remove(request, result) {
        let reply = result;
        {{name}}Collection.remove(request.body, function (err, result) {
            if (err) {
                console.log ("ERROR -> Payment.post: "+ err.message);
                reply.send(500).send(err.message);
            } else {
                console.log("payment.post: " + result);
                reply.sendStatus(200);
            }
        });  
    }
{{/if}}

}          
{{/each}}

module.exports = {
{{#each collections}}
    {{tsClassPropertyName name}}: {{tsClassPropertyName name}}{{#if @last}} {{else}}, {{/if}}
{{/each}}
}